import { type RenderContext } from "../../Renderer";
import { BooleanOption, type Option } from "../../RendererOptions";
import { TargetLanguage } from "../../TargetLanguage";
import { type StringTypeMapping } from "../../TypeBuilder";
import { type FixMeOptionsAnyType, type FixMeOptionsType } from "../../types";
import { TypeScriptZodRenderer } from "./TypeScriptZodRenderer";
export declare const typeScriptZodOptions: {
    justSchema: BooleanOption;
};
export declare class TypeScriptZodTargetLanguage extends TargetLanguage {
    protected getOptions(): Array<Option<FixMeOptionsAnyType>>;
    constructor(displayName?: string, names?: string[], extension?: string);
    get stringTypeMapping(): StringTypeMapping;
    get supportsOptionalClassProperties(): boolean;
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): TypeScriptZodRenderer;
}
