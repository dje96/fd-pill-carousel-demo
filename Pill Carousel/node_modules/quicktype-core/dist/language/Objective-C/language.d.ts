import { type RenderContext } from "../../Renderer";
import { BooleanOption, EnumOption, type Option, StringOption } from "../../RendererOptions";
import { TargetLanguage } from "../../TargetLanguage";
import { type FixMeOptionsAnyType, type FixMeOptionsType } from "../../types";
import { ObjectiveCRenderer } from "./ObjectiveCRenderer";
export type MemoryAttribute = "assign" | "strong" | "copy";
export interface OutputFeatures {
    implementation: boolean;
    interface: boolean;
}
export declare const objectiveCOptions: {
    features: EnumOption<{
        interface: boolean;
        implementation: boolean;
    }>;
    justTypes: BooleanOption;
    marshallingFunctions: BooleanOption;
    classPrefix: StringOption;
    extraComments: BooleanOption;
};
export declare class ObjectiveCTargetLanguage extends TargetLanguage {
    constructor();
    protected getOptions(): Array<Option<FixMeOptionsAnyType>>;
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): ObjectiveCRenderer;
}
