import { type RenderContext } from "../../Renderer";
import { BooleanOption, EnumOption, type Option } from "../../RendererOptions";
import { TargetLanguage } from "../../TargetLanguage";
import { type Type } from "../../Type";
import { type StringTypeMapping } from "../../TypeBuilder";
import { type FixMeOptionsAnyType, type FixMeOptionsType } from "../../types";
import { PythonRenderer } from "./PythonRenderer";
export interface PythonFeatures {
    dataClasses: boolean;
    typeHints: boolean;
}
export declare const pythonOptions: {
    features: EnumOption<PythonFeatures>;
    justTypes: BooleanOption;
    nicePropertyNames: BooleanOption;
};
export declare class PythonTargetLanguage extends TargetLanguage {
    protected getOptions(): Array<Option<FixMeOptionsAnyType>>;
    get stringTypeMapping(): StringTypeMapping;
    get supportsUnionsWithBothNumberTypes(): boolean;
    get supportsOptionalClassProperties(): boolean;
    needsTransformerForType(t: Type): boolean;
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): PythonRenderer;
}
