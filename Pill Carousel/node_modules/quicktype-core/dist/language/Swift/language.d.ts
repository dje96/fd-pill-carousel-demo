import { type DateTimeRecognizer } from "../../DateTime";
import { type RenderContext } from "../../Renderer";
import { BooleanOption, EnumOption, type Option, StringOption } from "../../RendererOptions";
import { AcronymStyleOptions } from "../../support/Acronyms";
import { TargetLanguage } from "../../TargetLanguage";
import { type StringTypeMapping } from "../../TypeBuilder";
import { type FixMeOptionsAnyType, type FixMeOptionsType } from "../../types";
import { SwiftRenderer } from "./SwiftRenderer";
export declare const swiftOptions: {
    justTypes: BooleanOption;
    convenienceInitializers: BooleanOption;
    explicitCodingKeys: BooleanOption;
    codingKeysProtocol: StringOption;
    alamofire: BooleanOption;
    namedTypePrefix: StringOption;
    useClasses: EnumOption<boolean>;
    mutableProperties: BooleanOption;
    acronymStyle: EnumOption<AcronymStyleOptions>;
    dense: EnumOption<boolean>;
    linux: BooleanOption;
    objcSupport: BooleanOption;
    optionalEnums: BooleanOption;
    swift5Support: BooleanOption;
    sendable: BooleanOption;
    multiFileOutput: BooleanOption;
    accessLevel: EnumOption<string>;
    protocol: EnumOption<{
        equatable: boolean;
        hashable: boolean;
    }>;
};
export declare class SwiftTargetLanguage extends TargetLanguage {
    constructor();
    protected getOptions(): Array<Option<FixMeOptionsAnyType>>;
    get stringTypeMapping(): StringTypeMapping;
    get supportsOptionalClassProperties(): boolean;
    get supportsUnionsWithBothNumberTypes(): boolean;
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): SwiftRenderer;
    get dateTimeRecognizer(): DateTimeRecognizer;
}
