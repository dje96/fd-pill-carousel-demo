import { type ConvenienceRenderer } from "../../ConvenienceRenderer";
import { type RenderContext } from "../../Renderer";
import { BooleanOption, EnumOption, type Option, StringOption } from "../../RendererOptions";
import { TargetLanguage } from "../../TargetLanguage";
import { type Type } from "../../Type";
import { type StringTypeMapping } from "../../TypeBuilder";
import { type FixMeOptionsAnyType, type FixMeOptionsType } from "../../types";
export declare enum Framework {
    Newtonsoft = "Newtonsoft",
    SystemTextJson = "SystemTextJson"
}
export type Version = 5 | 6;
export interface OutputFeatures {
    attributes: boolean;
    helpers: boolean;
}
export type CSharpTypeForAny = "object" | "dynamic";
export declare const cSharpOptions: {
    framework: EnumOption<Framework>;
    useList: EnumOption<boolean>;
    dense: EnumOption<boolean>;
    namespace: StringOption;
    version: EnumOption<Version>;
    virtual: BooleanOption;
    typeForAny: EnumOption<CSharpTypeForAny>;
    useDecimal: EnumOption<boolean>;
    features: EnumOption<{
        namespaces: boolean;
        helpers: boolean;
        attributes: boolean;
    }>;
    baseclass: EnumOption<string | undefined>;
    checkRequired: BooleanOption;
    keepPropertyName: BooleanOption;
};
export declare const newtonsoftCSharpOptions: {
    framework: EnumOption<Framework>;
    useList: EnumOption<boolean>;
    dense: EnumOption<boolean>;
    namespace: StringOption;
    version: EnumOption<Version>;
    virtual: BooleanOption;
    typeForAny: EnumOption<CSharpTypeForAny>;
    useDecimal: EnumOption<boolean>;
    features: EnumOption<{
        namespaces: boolean;
        helpers: boolean;
        attributes: boolean;
    }>;
    baseclass: EnumOption<string | undefined>;
    checkRequired: BooleanOption;
    keepPropertyName: BooleanOption;
};
export declare const systemTextJsonCSharpOptions: {
    framework: EnumOption<Framework>;
    useList: EnumOption<boolean>;
    dense: EnumOption<boolean>;
    namespace: StringOption;
    version: EnumOption<Version>;
    virtual: BooleanOption;
    typeForAny: EnumOption<CSharpTypeForAny>;
    useDecimal: EnumOption<boolean>;
    features: EnumOption<{
        namespaces: boolean;
        helpers: boolean;
        attributes: boolean;
    }>;
    baseclass: EnumOption<string | undefined>;
    checkRequired: BooleanOption;
    keepPropertyName: BooleanOption;
};
export declare class CSharpTargetLanguage extends TargetLanguage {
    constructor();
    protected getOptions(): Array<Option<FixMeOptionsAnyType>>;
    get stringTypeMapping(): StringTypeMapping;
    get supportsUnionsWithBothNumberTypes(): boolean;
    get supportsOptionalClassProperties(): boolean;
    needsTransformerForType(t: Type): boolean;
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): ConvenienceRenderer;
}
