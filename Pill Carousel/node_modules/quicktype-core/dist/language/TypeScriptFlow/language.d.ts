import { type RenderContext } from "../../Renderer";
import { BooleanOption, type Option } from "../../RendererOptions";
import { type FixMeOptionsAnyType, type FixMeOptionsType } from "../../types";
import { type JavaScriptRenderer, JavaScriptTargetLanguage } from "../JavaScript";
import { FlowRenderer } from "./FlowRenderer";
import { TypeScriptRenderer } from "./TypeScriptRenderer";
export declare const tsFlowOptions: {
    acronymStyle: import("../../RendererOptions").EnumOption<import("../../support/Acronyms").AcronymStyleOptions>;
    runtimeTypecheck: BooleanOption;
    runtimeTypecheckIgnoreUnknownProperties: BooleanOption;
    converters: import("../../RendererOptions").EnumOption<import("../../support/Converters").ConvertersOptions>;
    rawType: import("../../RendererOptions").EnumOption<"any" | "json">;
} & {
    justTypes: BooleanOption;
    nicePropertyNames: BooleanOption;
    declareUnions: BooleanOption;
    preferUnions: BooleanOption;
    preferTypes: BooleanOption;
    preferConstValues: BooleanOption;
    readonly: BooleanOption;
};
export declare abstract class TypeScriptFlowBaseTargetLanguage extends JavaScriptTargetLanguage {
    protected getOptions(): Array<Option<FixMeOptionsAnyType>>;
    get supportsOptionalClassProperties(): boolean;
    protected abstract makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): JavaScriptRenderer;
}
export declare class TypeScriptTargetLanguage extends TypeScriptFlowBaseTargetLanguage {
    constructor();
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): TypeScriptRenderer;
}
export declare class FlowTargetLanguage extends TypeScriptFlowBaseTargetLanguage {
    constructor();
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): FlowRenderer;
}
