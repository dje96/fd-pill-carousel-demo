import { type RenderContext } from "../../Renderer";
import { BooleanOption, EnumOption, type Option } from "../../RendererOptions";
import { TargetLanguage } from "../../TargetLanguage";
import { type FixMeOptionsAnyType, type FixMeOptionsType } from "../../types";
import { RustRenderer } from "./RustRenderer";
import { Density, Visibility } from "./utils";
export declare const rustOptions: {
    density: EnumOption<Density>;
    visibility: EnumOption<Visibility>;
    deriveDebug: BooleanOption;
    deriveClone: BooleanOption;
    derivePartialEq: BooleanOption;
    skipSerializingNone: BooleanOption;
    edition2018: BooleanOption;
    leadingComments: BooleanOption;
};
export declare class RustTargetLanguage extends TargetLanguage {
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): RustRenderer;
    constructor();
    protected getOptions(): Array<Option<FixMeOptionsAnyType>>;
}
