import { type RenderContext } from "../../Renderer";
import { BooleanOption, type Option, StringOption } from "../../RendererOptions";
import { TargetLanguage } from "../../TargetLanguage";
import { type StringTypeMapping } from "../../TypeBuilder";
import { type FixMeOptionsAnyType, type FixMeOptionsType } from "../../types";
import { DartRenderer } from "./DartRenderer";
export declare const dartOptions: {
    nullSafety: BooleanOption;
    justTypes: BooleanOption;
    codersInClass: BooleanOption;
    methodNamesWithMap: BooleanOption;
    requiredProperties: BooleanOption;
    finalProperties: BooleanOption;
    generateCopyWith: BooleanOption;
    useFreezed: BooleanOption;
    useHive: BooleanOption;
    useJsonAnnotation: BooleanOption;
    partName: StringOption;
};
export declare class DartTargetLanguage extends TargetLanguage {
    constructor();
    protected getOptions(): Array<Option<FixMeOptionsAnyType>>;
    get supportsUnionsWithBothNumberTypes(): boolean;
    get stringTypeMapping(): StringTypeMapping;
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): DartRenderer;
}
