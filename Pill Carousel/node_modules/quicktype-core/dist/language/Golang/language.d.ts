import { type RenderContext } from "../../Renderer";
import { BooleanOption, type Option, StringOption } from "../../RendererOptions";
import { TargetLanguage } from "../../TargetLanguage";
import { type StringTypeMapping } from "../../TypeBuilder";
import { type FixMeOptionsAnyType, type FixMeOptionsType } from "../../types";
import { GoRenderer } from "./GolangRenderer";
export declare const goOptions: {
    justTypes: BooleanOption;
    justTypesAndPackage: BooleanOption;
    packageName: StringOption;
    multiFileOutput: BooleanOption;
    fieldTags: StringOption;
    omitEmpty: BooleanOption;
};
export declare class GoTargetLanguage extends TargetLanguage {
    constructor();
    protected getOptions(): Array<Option<FixMeOptionsAnyType>>;
    get supportsUnionsWithBothNumberTypes(): boolean;
    get stringTypeMapping(): StringTypeMapping;
    get supportsOptionalClassProperties(): boolean;
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): GoRenderer;
    protected get defaultIndentation(): string;
}
