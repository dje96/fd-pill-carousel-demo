"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scala3TargetLanguage = exports.scala3Options = exports.Framework = void 0;
const RendererOptions_1 = require("../../RendererOptions");
const Support_1 = require("../../support/Support");
const TargetLanguage_1 = require("../../TargetLanguage");
const CirceRenderer_1 = require("./CirceRenderer");
const Scala3Renderer_1 = require("./Scala3Renderer");
const UpickleRenderer_1 = require("./UpickleRenderer");
var Framework;
(function (Framework) {
    Framework["None"] = "None";
    Framework["Upickle"] = "Upickle";
    Framework["Circe"] = "Circe";
})(Framework = exports.Framework || (exports.Framework = {}));
exports.scala3Options = {
    framework: new RendererOptions_1.EnumOption("framework", "Serialization framework", [
        ["just-types", Framework.None],
        ["circe", Framework.Circe],
        ["upickle", Framework.Upickle]
    ], undefined),
    packageName: new RendererOptions_1.StringOption("package", "Package", "PACKAGE", "quicktype")
};
class Scala3TargetLanguage extends TargetLanguage_1.TargetLanguage {
    constructor() {
        super("Scala3", ["scala3"], "scala");
    }
    getOptions() {
        return [exports.scala3Options.framework, exports.scala3Options.packageName];
    }
    get supportsOptionalClassProperties() {
        return true;
    }
    get supportsUnionsWithBothNumberTypes() {
        return true;
    }
    makeRenderer(renderContext, untypedOptionValues) {
        const options = (0, RendererOptions_1.getOptionValues)(exports.scala3Options, untypedOptionValues);
        switch (options.framework) {
            case Framework.None:
                return new Scala3Renderer_1.Scala3Renderer(this, renderContext, options);
            case Framework.Upickle:
                return new UpickleRenderer_1.UpickleRenderer(this, renderContext, options);
            case Framework.Circe:
                return new CirceRenderer_1.CirceRenderer(this, renderContext, options);
            default:
                return (0, Support_1.assertNever)(options.framework);
        }
    }
}
exports.Scala3TargetLanguage = Scala3TargetLanguage;
