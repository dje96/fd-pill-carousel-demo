import { type RenderContext } from "../../Renderer";
import { BooleanOption, EnumOption, type Option, StringOption } from "../../RendererOptions";
import { AcronymStyleOptions } from "../../support/Acronyms";
import { TargetLanguage } from "../../TargetLanguage";
import { type StringTypeMapping } from "../../TypeBuilder";
import { type FixMeOptionsAnyType, type FixMeOptionsType } from "../../types";
import { JavaRenderer } from "./JavaRenderer";
export declare const javaOptions: {
    useList: EnumOption<boolean>;
    justTypes: BooleanOption;
    dateTimeProvider: EnumOption<string>;
    acronymStyle: EnumOption<AcronymStyleOptions>;
    packageName: StringOption;
    lombok: BooleanOption;
    lombokCopyAnnotations: BooleanOption;
};
export declare class JavaTargetLanguage extends TargetLanguage {
    constructor();
    protected getOptions(): Array<Option<FixMeOptionsAnyType>>;
    get supportsUnionsWithBothNumberTypes(): boolean;
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: FixMeOptionsType): JavaRenderer;
    get stringTypeMapping(): StringTypeMapping;
}
